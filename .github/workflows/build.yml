name: Java CI with Maven and Docker Compose  # Nome do workflow

on:
  push:
    branches: [main]  # Executa no push na branch main
  pull_request:
    branches: [main]  # Executa em PRs para a main

jobs:
  build:
    runs-on: ubuntu-latest  # Define que o job vai rodar numa VM Ubuntu atualizada
    env:
      # Variáveis do banco que virão dos Secrets do GitHub
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      SPRING_DATASOURCE_MYSQL_ROOT_PASSWORD: ${{ secrets.SPRING_DATASOURCE_MYSQL_ROOT_PASSWORD }}

    steps:
      - name: Checkout repository  # Passo para baixar o código do repositório
        uses: actions/checkout@v3

      - name: Set up JDK 17  # Passo para configurar o JDK 17 na VM
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Define a versão do Java que será usada
          distribution: 'temurin'  # Define a distribuição do Java (Temurin é uma distribuição OpenJDK)

      - name: Build Docker image  # Passo que constrói a imagem Docker da aplicação
        run: docker build -t excel-batch-processing-springboot-mysql:latest .

      - name: Clean Docker volumes (optional) # Limpa volume para evitar dados corrompidos
        run: docker volume rm employee-excel-batch-processing-springboot-mysql_mysqldata || true

      - name: Start services with docker compose # Sobe app e banco juntos
        run: docker compose up -d --build

      - name: Wait for database to be healthy
        run: |
          echo "Esperando MySQL ficar saudável..."
          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(docker ps -qf "name=db"))
            if [ "$STATUS" = "healthy" ]; then
              echo "MySQL está saudável!"
              exit 0
            fi
            echo "Tentativa $i: MySQL ainda não está saudável, esperando 5s..."
            sleep 5
          done
          echo "Erro: MySQL não ficou saudável em 150s"
          docker compose logs db
          exit 1

      - name: Wait for batch process to finish
        run: |
          echo "Aguardando batch finalizar..."
          # Pega o nome do container do app (service app no docker compose)
          APP_CONTAINER=$(docker ps --filter "name=app" --format "{{.Names}}")
          if [ -z "$APP_CONTAINER" ]; then
            echo "Erro: container do app não encontrado!"
            docker compose logs
            exit 1
          fi

          # Espera o container do app parar (batch finalizou)
          for i in {1..60}; do
            RUNNING=$(docker ps -q -f "name=$APP_CONTAINER")
            if [ -z "$RUNNING" ]; then
              echo "Batch finalizou!"
              exit 0
            fi
            echo "Tentativa $i: batch ainda rodando, esperando 5s..."
            sleep 5
          done

          echo "Erro: batch não finalizou após 300s"
          docker logs "$APP_CONTAINER"
          docker compose logs
          exit 1

      - name: Stop and remove containers
        run: docker compose down -v